# basic

features
  feature
    mandatory
      featureA
      featureB

==>

Tree(
  FeaturesSection(
    Root,
    FeatureBlock(
      StateFeature(
        ExtendedFeature(Feature)
        StateBlock(
          State
          FeatureBlock(
            ExtendedFeature(Feature),
            ExtendedFeature(Feature)
          )
        )
      )
    )
  )
)

# key_value

features
    Elevator {abstract}
        mandatory
            featureA {test 123}


==>

Tree(
  FeaturesSection(
    Root,
    FeatureBlock(
      StateFeature(
        ExtendedFeature(
          Feature
          AttributeItem(
            AttributeSelection(Key)
          )
        )
        StateBlock(
          State
          FeatureBlock(
            ExtendedFeature(
              Feature
              AttributeItem(
                AttributeSelection(
                  Key
                  Value
                )
              )
            )
          )
        )
      )
    )
  )
)

# include

include
    Boolean.*
    Arithmetic.aggregate-function
    Type

features
    A


==>

Tree(
  IncludeBlock
  FeaturesSection(
    Root
    FeatureBlock(
      ExtendedFeature(Feature)
    )
  )
)

# nested_main

imports
    nested.nested_sub as nesu

features
    Root
        optional
            nesu.Root


==>

Tree(
  ImportBlock (
    ImportFeature (
      ImportName
      Specifier
    )
    Feature
  )
  FeaturesSection (
    Root
    FeatureBlock (
      StateFeature (
        ExtendedFeature (
          Feature
        )
        StateBlock (
          State
          FeatureBlock (
            ExtendedFeature (
              ImportFeature (
                ImportName
                Specifier
              )
            )
          )
        )
      )
    )
  )
)



# type

include
    Type

features
    Real A
        or
            Integer B
            String C


==>


Tree(
  IncludeBlock
  FeaturesSection (
    Root
    FeatureBlock (
      StateFeature(
        ExtendedFeature (
          Type
          Feature
        )
        StateBlock (
          State
          FeatureBlock (
            ExtendedFeature (
              Type
              Feature
            )
            ExtendedFeature (
              Type
              Feature
            )
          )
        )
      )
    )
  )
)


# composition_root

imports
	composition_sub1

features
	Computer
		optional
			"RAM-module"
		mandatory
			"SATA-Devices"
				[0..3]
					HDD
					SSD
					"DVD-drive"
					"Card-reader"
					"Blu-ray-drive"
			composition_sub1.CPU
			PSU {abstract true}
				alternative
					strong_PSU
					weak_PSU

constraints
	SSD => strong_PSU
	"DVD-drive" <=> composition_sub1.brand & composition_sub1.fmIntel.feature1 & composition_sub1.composition_sub1_sub2.feature2


==>

Tree(
  ImportBlock (
    Feature
  )
  FeaturesSection (
    Root
    FeatureBlock (
      StateFeature (
        ExtendedFeature (
          Feature
        )
        StateBlock (
          State
          FeatureBlock (
            ExtendedFeature (
              Feature
            )
          )
          State
          FeatureBlock (
            StateFeature (
              ExtendedFeature (
                Feature
              )
              StateBlock (
                State (
                  Counter (
                    Min
                    Max
                  )
                )
                FeatureBlock (
                  ExtendedFeature (
                    Feature
                  )
                  ExtendedFeature (
                    Feature
                  )
                  ExtendedFeature (
                    Feature
                  )
                  ExtendedFeature (
                    Feature
                  )
                  ExtendedFeature (
                    Feature
                  )
                )
              )
            )
            ExtendedFeature (
              ImportFeature (
                ImportName
                Specifier
              )
            )
            StateFeature (
              ExtendedFeature (
                Feature
                AttributeItem (
                  AttributeSelection (
                    Key
                    Value
                  )
                )
              )
              StateBlock (
                State
                FeatureBlock (
                  ExtendedFeature (
                    Feature
                  )
                  ExtendedFeature (
                    Feature
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  ConstraintsSection (
    ConstraintsBlock (
      Constraints (
        Constraints (
          ConstraintsItem
        )
        ConstraintSign
        ConstraintsItem
      )
      Constraints (
        Constraints (
          Constraints (
            Constraints (
              ConstraintsItem
            )
            ConstraintSign
            ConstraintsItem (
              ImportFeature (
                ImportName
                Specifier
              )
            )
          )
          ConstraintSign
          ConstraintsItem (
            ImportFeature (
              ImportName
              Specifier
              Specifier
            )
          )
        )
        ConstraintSign
        ConstraintsItem (
          ImportFeature (
            ImportName
            Specifier
            Specifier
          )
        )
      )
    )
  )
)


# constraints

features
    Elevator
        mandatory
            featureA
            featureB
            featureC
constraints
    featureA | featureB
    featureA => featureB
    featureA => featureB


==>

Tree(
  FeaturesSection (
    Root
    FeatureBlock (
      StateFeature (
        ExtendedFeature (
          Feature
        )
        StateBlock (
          State
          FeatureBlock (
            ExtendedFeature (
              Feature
            )
            ExtendedFeature (
              Feature
            )
            ExtendedFeature (
              Feature
            )
          )
        )
      )
    )
  )
  ConstraintsSection (
    ConstraintsBlock (
      Constraints (
        Constraints (
          ConstraintsItem
        )
        ConstraintSign
        ConstraintsItem
      )
      Constraints (
        Constraints (
          ConstraintsItem
        )
        ConstraintSign
        ConstraintsItem
      )
      Constraints (
        Constraints (
          ConstraintsItem
        )
        ConstraintSign
        ConstraintsItem
      )
    )
  )
)

